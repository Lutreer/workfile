1:RequireJS会异步地以无序的形式加载这些库。
2.防止js加载阻塞页面渲染
3.使用程序调用的方式加载js，防出现如下丑陋的场景

api:

define 从名字就可以看出这个api是用来定义一个模块

define('app/basic', ['util'], function(util){
第一个指定模块的名称 如果不指定以文件名成作为模块名称，
数组 指定依赖项


require 加载依赖模块，并执行加载完后的回调函数

require.config是用来配置模块加载位置，简单点说就是给模块起一个更短更好记的名字
[]数组中的js文件是从前往后找，


require(["jquery","underscore"],function($, _){
    $(function(){
        _.each([1,2,3],alert);
    })
})

callback函数中发现有$参数，这个就是依赖的jquery模块的输出变量，如果你依赖多个模块，可以依次写入多个参数来使用


什么是循环依赖：在a执行到require('b')的地方时会停下来去调用b,当去执行b，执行到一半发现require('a'),就停下来去调用a，这么就形成了循环依赖。这么下去肯定不行嘛，不就时死循环了。require.js怎么处理的： require.js只会执行到相互引用的部分，下面的代码不再过问，也就是写再多也调用不到。循环会导致问题：开发时，在a.js中调用b.js中的某个方法会报错，“xxx is not a function”！原因就是因为该方法并没有执行到。解决方法： 当出现循环依赖时，就不要依赖前置加载了，在a需要调用b的某个方法的那个地方先就近加载：var b = require('b'),然后再去调用b中的方法。其它：循环依赖不会出现在ES6中的import中，因为ES6中执行到import时并不会去执行import的代码，只是返回了一个引用。等到真正用到的时候才会去执行。

作者：Leasong
链接：https://www.zhihu.com/question/28753453/answer/152789012
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
